language: python

python:
  - "2.7"

dist: trusty

sudo: required

cache:
  bundler: true
  directories:
    - $HOME/docker

env:
  - ACTION=unit
  - ACTION=integration

stages:
  - codestyle
  - build
  - tests

before_install:
  - export GEOTREK_VERSION=$(cat VERSION)
  - export DOMAIN_NAME=geotrek.test
  - sudo service postgresql stop
  - if [[ $ACTION == unit ]]; then mkdir -p var; fi
  - if [[ $ACTION == integration ]]; then mkdir -p install/var; fi
  - if [[ $ACTION == integration ]]; then echo '127.0.0.1    '$DOMAIN_NAME | sudo tee -a /etc/hosts; fi

install:
  # Load cached docker images
  - if [[ -d $HOME/docker ]]; then ls $HOME/docker/*.tar.gz | xargs -I {file} sh -c "zcat {file} | docker load"; fi
  - ls -als /home/travis/docker
  # pull common images
  - docker pull redis:4.0-alpine
  - docker pull makinacorpus/convertit
  - docker pull makinacorpus/screamshotter
  - docker pull makinacorpus/postgis:10-2.4
  # pull specific production images
  - if [[ $ACTION == integration ]]; then docker pull memcached:1.5-alpine; fi
  - if [[ $ACTION == integration ]]; then docker pull nginx:1.13; fi
  # tag cached image as geotrekce/admin:latest
  - if [[ $ACTION == integration ]]; then docker tag geotrek:latest geotrekce/admin:latest; fi
  # install production env
  - if [[ $ACTION == integration ]]; then cd install; fi
  - if [[ $ACTION == integration ]]; then cp .env.dist .env; fi
  - if [[ $ACTION == integration ]]; then sed -i.bak 's/^\(POSTGRES_USER=\).*/\1test/' .env; fi
  - if [[ $ACTION == integration ]]; then sed -i.bak 's/^\(POSTGRES_DB=\).*/\1test/' .env; fi
  - if [[ $ACTION == integration ]]; then sed -i.bak 's/^\(POSTGRES_PASSWORD=\).*/\1test/' .env; fi
  - if [[ $ACTION == integration ]]; then sed -i.bak 's/^\(DOMAIN_NAME=\).*/\1'$DOMAIN_NAME'/' .env; fi
  - if [[ $ACTION == integration ]]; then sed -i.bak 's/^\(SECRET_KEY=\).*/\1key-test-key-test/' .env; fi
  # clean and install capserjs + phantomjs
  - if [[ $ACTION == integration ]]; then sudo rm -rf /usr/local/bin/phantomjs* /usr/bin/phantomjs* /usr/local/phantomjs*; fi
  - if [[ $ACTION == integration ]]; then sudo wget --quiet https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-1.9.7-linux-x86_64.tar.bz2 -O phantomjs.tar.bz2; fi
  - if [[ $ACTION == integration ]]; then sudo tar -jxvf phantomjs.tar.bz2; fi
  - if [[ $ACTION == integration ]]; then sudo rm phantomjs.tar.bz2; fi
  - if [[ $ACTION == integration ]]; then export PATH=$PATH:$PWD/phantomjs-1.9.7-linux-x86_64/bin/; fi
  - if [[ $ACTION == integration ]]; then sudo wget --quiet https://github.com/n1k0/casperjs/archive/1.1-beta3.zip -O casperjs.zip; fi
  - if [[ $ACTION == integration ]]; then sudo unzip -o casperjs.zip; fi
  - if [[ $ACTION == integration ]]; then sudo rm casperjs.zip; fi
  - if [[ $ACTION == integration ]]; then export PATH=$PATH:$PWD/casperjs-1.1-beta3/bin/; fi
  # install npm test dependencies
  - if [[ $ACTION == integration ]]; then npm install ../geotrek/jstests; fi

before_script:
  - docker-compose up -d postgres
  - sleep 15
  - docker-compose run web initial.sh
  - if [[ $ACTION == integration ]]; then docker-compose run web ./manage.py loaddata development-pne; fi
  - if [[ $ACTION == integration ]]; then docker-compose up -d; fi

script:
  - if [[ $ACTION == unit ]]; then docker-compose run web /bin/sh -c exit; fi
  - if [[ $ACTION == unit ]]; then docker-compose run web coverage run ./manage.py test --settings=geotrek.settings.tests; fi
  - if [[ $ACTION == integration ]]; then casperjs --baseurl=http://$DOMAIN_NAME test ../geotrek/jstests/nav-*.js; fi

jobs:
  include:
    - stage: codestyle

      env: ACTION=none

      install:
        - pip install flake8

      before_script: skip

      script:
        - flake8 --exclude "" --ignore=E501,F403,F405 geotrek/settings
        - flake8 geotrek
        # prevent SRID value in migrations
        - find geotrek/*/migrations/*.py | xargs grep -l srid | xargs grep -L SRID

    - stage: build

      env: ACTION=none

      install:
        - sudo curl -L https://github.com/docker/compose/releases/download/1.21.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
        - sudo chmod +x /usr/local/bin/docker-compose
        - docker pull makinacorpus/geodjango:bionic-py2

      before_script: skip

      script:
        - make build

      before_cache:
        # delete geodjango image
        - docker rmi -f makinacorpus/geodjango:bionic-py2
        # cache build image
        - rm -rf $HOME/docker
        - mkdir -p $HOME/docker && docker images -a --filter='dangling=false' --format '{{.Repository}}:{{.Tag}} {{.ID}}' | xargs -n 2 -t sh -c 'test -e $HOME/docker/$0.tar.gz || docker save $0 | gzip -2 > $HOME/docker/$0.tar.gz'

#    - stage: deploy
#
#      script: ./docker/docker_push.sh

