language: python

python:
  - "2.7"

cache:
  - apt

dist: trusty
sudo: required

env:
  - ACTION=test
  - ACTION=codestyle
  - ACTION=deploy

matrix:
  allow_failures:
    - env: ACTION=deploy

before_install:
  # initial directories and environment
  - mkdir -p var/static var/extra_static var/media/upload var/cache var/extra_templates var/extra_locale
  - export GEOTREK_VERSION=$(cat VERSION)
  - export LOCAL_USER_ID=$(id -u)
  # fix LOCAL_USER for build docker
  - sed -i.bak 's/^\(LOCAL_USER_ID=\).*/\1'$(id -u)'/' docker.env
  # update docker-compose
  - if [[ $ACTION != codestyle ]]; then sudo curl -L https://github.com/docker/compose/releases/download/1.21.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose; fi
  - if [[ $ACTION != codestyle ]]; then sudo chmod +x /usr/local/bin/docker-compose; fi
  # stop travis postgresql
  - if [[ $ACTION != codestyle ]]; then sudo service postgresql stop; fi
  # pull required docker images
  - if [[ $ACTION != codestyle ]]; then docker pull ubuntu:bionic; fi
  - if [[ $ACTION != codestyle ]]; then docker pull redis:4.0-alpine; fi
  - if [[ $ACTION != codestyle ]]; then docker pull geotrekce/convertit; fi
  - if [[ $ACTION != codestyle ]]; then docker pull geotrekce/screamshotter; fi
  - if [[ $ACTION != codestyle ]]; then docker pull juank/postgis:10-2.4; fi
  - if [[ $ACTION == deploy ]]; then docker pull geotrekce/admin:latest; fi
  - if [[ $ACTION == deploy ]]; then docker pull memcached:1.5-alpine; fi
  # setup env for deploy
  - if [[ $ACTION == deploy ]]; then cd install; fi
  - if [[ $ACTION == deploy ]]; then cp docker.env.dist docker.env; fi
  - if [[ $ACTION != codestyle ]];
    then
      sed -i.bak 's/^\(POSTGRES_USER=\).*/\1test/' docker.env;
      sed -i.bak 's/^\(POSTGRES_DB=\).*/\1test/' docker.env
      sed -i.bak 's/^\(POSTGRES_PASSWORD=\).*/\1test/' docker.env
      sed -i.bak 's/^\(DOMAIN_NAME=\).*/\1localhost/' docker.env
    fi
  # initiate database
  - if [[ $ACTION != codestyle ]];
    then
      docker-compose up -d postgres;
    fi

install:
  - if [[ $ACTION == codestyle ]]; then pip install flake8; fi
  - if [[ $ACTION == test ]]; then docker-compose build; fi
  - if [[ $ACTION == test ]]; then docker tag geotrek geotrekce/admin:$GEOTREK_VERSION; fi
#  - if [[ $ACTION == test ]] && [[ $GEOTREK_VERSION != *.dev0 ]];
#    then
#      docker tag geotrek geotrekce/admin:latest;
#    fi
  - if [[ $ACTION == test ]]; then docker tag geotrek geotrekce/admin:latest; fi
  - if [[ $ACTION != codestyle ]]; then docker-compose run web ./docker/initial.sh; fi
  - if [[ $ACTION == deploy ]]; then docker-compose up -d; fi

script:
  - if [[ $ACTION == codestyle ]]; then flake8 --exclude "" --ignore=E501,F403,F405 geotrek/settings; fi
  - if [[ $ACTION == codestyle ]]; then flake8 geotrek; fi
  - if [[ $ACTION == codestyle ]]; then find geotrek/*/migrations/*.py | xargs grep -l srid | xargs grep -L SRID; fi
  - if [[ $ACTION == test ]]; then docker-compose run web /app/venv/bin/coverage run ./manage.py test --settings=geotrek.settings.tests; fi

after_success:
  # Report coverage results to coveralls.io
  - if [[ $ACTION == test ]]; then docker-compose run web /app/venv/bin/coverage report -m; fi
  - if [[ $ACTION == test ]]; then sudo pip install coveralls; fi
  - if [[ $ACTION == test ]]; then coveralls; fi

deploy:
  provider: script
  script: bash ./docker/docker_push.sh
  skip_cleanup: true
  on:
    #branch: master
    branch: docker-integration
